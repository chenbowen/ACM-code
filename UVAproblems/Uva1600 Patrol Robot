#include <iostream>
#include <cstdio>
#include <queue>
#include <cstring>

using namespace std;
const int MAXN = 20 + 5;
int m, n, k;
int dx[] = { 0, -1, 0, 1}, dy[] = {1, 0, -1, 0}; 
bool f[MAXN][MAXN], b[MAXN][MAXN];

struct Node {
    int x, y, d, n;
    Node(int x = 0, int y = 0, int d = 0, int n = 0): x(x), y(y), d(d), n(n) {}
};

bool dfs(Node cur) {
    if (!b[cur.x][cur.y]) return true;
    f[cur.x][cur.y] = 1;
    bool ok = 0;
    for (int i = 0; i < 4; i++) {
        int nx = cur.x + dx[i], ny = cur.y + dy[i];
        if (nx >= 0 && ny >= 0 && nx < m && ny < n && !f[nx][ny]) {
            int nk = cur.n;
            if (b[nx][ny]) {
                if (nk > 0 && dfs(Node(nx, ny, cur.d + 1, nk - 1))) {
                    ok = 1;
                    break;
                }
            }
            else {ok = 1; break;}
        }
    }
    f[cur.x][cur.y] = 0;
    return ok;
}

int bfs() {
    int ans = -1;
    queue<Node> q; 
    q.push(Node(0, 0, 0, k));
    f[0][0] = 1;
    while (!q.empty()) {
        Node cur = q.front(); q.pop();
        if (cur.x == m - 1 && cur.y == n - 1) { ans = cur.d; break;}
        for (int i = 0; i < 4; i++) {
            int nx = cur.x + dx[i], ny = cur.y + dy[i];
            if (nx >= 0 && ny >= 0 && nx < m && ny < n && !f[nx][ny]) {
                int nk = cur.n;
                if (b[nx][ny])
                    if (nk > 0 && dfs(Node(nx, ny, cur.d + 1, nk - 1)))  {
                        nk--;
                    }
                    else continue;
                else nk = k;
                f[nx][ny] = 1;
                q.push(Node(nx, ny, cur.d + 1, nk));
            }
        }
    }
    return ans;
}

int main() {
    freopen("in", "r", stdin);
    //freopen("out", "w", stdout);
    int T;
    scanf("%d", &T);
    while (T--) {
        memset(f, 0, sizeof(f));
        scanf("%d%d%d", &m, &n, &k);
        for (int i = 0; i < m; i++)
            for (int j = 0; j < n; j++) 
                scanf("%d", &b[i][j]);
        int ans = bfs();
        printf("%d\n", ans);
    }
    return 0;
}
