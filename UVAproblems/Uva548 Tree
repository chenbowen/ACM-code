/*
    Build a tree according to its Inorder and Postorder list;
    Then use dfs to calculate and record the leaf which has minimum value path.
    I use array list instead of struct pointer to build binary tree since it runs fast and is easy to debug.
*/

#include <cstdio>
#include <cstring>
#include <sstream>
#include <iostream>
#include <climits>
using namespace std;

const int MAXN = 10000 + 10;

int Left[MAXN], Right[MAXN], Nodes[MAXN], cnt, root;
int Ino[MAXN], Poso[MAXN], n, res, sum, minn;

void initTree() {
    int size = (n + 1) << 2;
    memset(Left, 0, size);
    memset(Right, 0, size);
    memset(Nodes, 0, size);
    cnt = 0;
}

int newNode() {
    return ++cnt;
}

bool read() {
    string s;
    int in;
    for (int i = 0; i < 2; i++) {
        n = 0;
        if (!getline(cin, s)) return false;
        stringstream ss(s);
        while (ss >> in) {
            if (!i) Ino[n++] = in;
            else Poso[n++] = in;
        } 
    }
    return true;
}

int find(int v, int s, int e) {
    for (int i = s; i <= e; i++) 
        if (Ino[i] == v) 
            return i;
    return 0;
}

int buildTree(int ps, int is, int ie, int pe) {
    if (ps > pe) return 0;
    int v = Poso[pe], num = newNode();
    Nodes[num] = v;
    int index = find(v, is, ie);
    int len = index - 1 - is;
    int npe = ps + len;
    Left[num] = buildTree(ps, is, index - 1, npe);
    Right[num] = buildTree(npe + 1, index + 1, ie, pe - 1);
    return num;
}

void dfs(int node) {
    if (!Nodes[node]) return;
    sum += Nodes[node];
    if (!Left[node] && !Right[node])
        if (sum < minn || (sum == minn && res > Nodes[node])) { res = Nodes[node]; minn = sum;}
    dfs(Left[node]); dfs(Right[node]);
    sum -= Nodes[node];
}

int main() {
    //freopen("in", "r", stdin);
    //freopen("out", "w", stdout);
    while (read()) {
        initTree();
        root = buildTree(0, 0, n - 1, n - 1);
        res = sum = 0;
        minn = INT_MAX;
        dfs(root);
        printf("%d\n", res);        
    }    
    return 0;
}
