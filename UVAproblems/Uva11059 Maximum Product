#include <cstdio>
#include <cstring>
#include <algorithm>
using namespace std;
const int MAXN = 18 + 2;
int a[MAXN], spea[MAXN];

long long max_product(int start, int end) {
    if (start >= end) return 0;
    long long ans = 1;
    int n_neg = 0;
    for (int i = start; i < end; i++)
        if (a[i] < 0) n_neg++;
    if (n_neg % 2 == 0)
        for (int i = start; i < end; i++) ans *= a[i];
    else {
        int left, right, i = start;
        long long left_prod = -1, right_prod = -1;
        while (i < end) {
            left_prod *= a[i];
            if (a[i] < 0) break;
            i++;
        }
        left = i;
        i = end - 1;
        while (i >= start) {
            right_prod *= a[i];
            if (a[i] < 0) break;
            i--;
        }
        right = i;
        if (left_prod < right_prod)
            for (i = left + 1; i < end; i++) ans *= a[i];
        else 
            for (i = start; i < right; i++) ans *= a[i];
        if (start == right && start == end - 1) ans = 0;
    }
    return ans;
}

int main() {
    int N, t = 0;
    while (scanf("%d", &N) == 1) {
        int i, j = 0;
        memset(spea, 0, sizeof(spea));
        for (i = 0; i < N; i++)  {
            scanf("%d", &a[i]);
            if (!a[i]) spea[j++] = i; 
        }
        spea[j++] = N;
        i = j = 0;
        long long ans = 0;
        while (i < N) {
            ans = max(ans, max_product(i, spea[j]));
            i = spea[j++] + 1;
        }
        printf("Case #%d: The maximum product is %lld.\n\n", ++t, ans);
    }
    return 0;
}
