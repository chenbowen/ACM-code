#include<cstdio>
#include<cstring>
#include<queue>
#include<map>
#include<set>
#include<algorithm>

using namespace std;
const int maxn = 400 + 10, maxl = 24 + 5, INF = 2;
int n, m, k, n2, a[maxn], p[maxn];
bool f[maxn][maxn];
map<string, int> IDT;
set<string> plug;
map<string, int> device;

struct Edge {
    int u, v, cap, flow;
    Edge(int u = 0, int v = 0, int cap = 0, int flow = 0): u(u), v(v), cap(cap), flow(flow) {}
};
vector<Edge> edges;
vector<int> G[maxn];

void Floyd() {
    for (int i = 0; i < n2; i++) f[i][i] = 1;
    n2 = IDT.size();
    for (int kk = 0; kk < n2; kk++)
        for (int i = 0; i < n2; i++)
            for (int j = 0; j < n2; j++)
                f[i][j] = f[i][j] || (f[i][kk] && f[kk][j]);
}

void addEdge(int u, int v) {
    edges.push_back(Edge(u, v, 1));
    edges.push_back(Edge(v, u));
    G[u].push_back(edges.size() - 2);
    G[v].push_back(edges.size() - 1);
}

void build() {
    int idx = 1;
    for (auto i: device) {
        vector<int> v;
        int num = IDT[i.first];
        if (plug.count(i.first)) v.push_back(IDT[i.first] + m + 1);
        for (int j = 0; j < n2; j++) if (j != num && f[num][j] && j < n) v.push_back(j + m + 1);
        for (int j = 0; j < i.second; idx++, j++)
            for (auto kk: v) addEdge(idx, kk);
    }
    for (int i = 1; i <= m; i++) addEdge(0, i);
    for (int i = 1 + m; i < 1 + m + n; i++) addEdge(i, 1 + m + n);
}

int MaxFlow(int s, int t) {
    int flow = 0;
    for (;;) {
        memset(a, 0, sizeof(a));
        p[s] = 0;
        a[s] = INF;
        queue<int> q;
        q.push(s);
        while (!q.empty()) {
            int u = q.front(); q.pop();
            for (int i = 0; i < G[u].size(); i++) {
                Edge &e = edges[G[u][i]];
                if (!a[e.v] && e.cap > e.flow) {
                    p[e.v] = G[u][i];
                    a[e.v] = min(a[u], e.cap - e.flow);
                    q.push(e.v);
                }
            }
            if (a[t]) break;
        }
        if (!a[t]) break;
        flow += a[t];
        for (int i = t; i != s; i = edges[p[i]].u) {
            edges[p[i]].flow += a[t];
            edges[p[i]^1].flow -= a[t];
        }
    }
    return flow;
}


void init() {
    edges.clear();
    for (int i = 0; i < maxn; i++) G[i].clear();
    IDT.clear();
    plug.clear();
    device.clear();
    memset(f, 0, sizeof(f));
}

int main() {
    int kase = 0, T;
    scanf("%d", &T);
    while (T--) {
        init();
        if (++kase > 1) printf("\n");
        scanf("%d", &n);
        char name[maxl], name2[maxl];
        for (int i = 0; i < n; i++) {
            scanf("%s", name);
            string s = name;
            plug.insert(s);
            IDT[s] = IDT.size() - 1;
        }
        scanf("%d", &m);
        for (int i = 0; i < m; i++) {
            scanf("%s %s", name, name2);
            string s2 = name2;
            device[s2]++;
            if (IDT.count(s2) == 0) IDT[s2] = IDT.size() - 1;
        }
        scanf("%d", &k);
        for (int i = 0; i < k; i++) {
            scanf("%s %s", name, name2);
            string s = name, s2 = name2;
            if (IDT.count(s) == 0) IDT[s] = IDT.size() - 1;
            if (IDT.count(s2) == 0) IDT[s2] = IDT.size() - 1;
            f[IDT[s]][IDT[s2]] = 1;
        }
        Floyd();
        build();
        int ans = m - MaxFlow(0, 1 + m + n);
        printf("%d\n", ans);
    }
    return 0;
}
