#include<cstdio>
#include<cstring>
#include<algorithm>
#include<utility>
#include<iostream>
using namespace std;
const int MAXN = 100 + 10, inf = 2000000000;
int n, d[MAXN][MAXN];
string s;

struct Range {
    int i, j;
    Range(int x = 0, int y = 0): i(x), j(y) {}
};
pair<Range, Range> ans[MAXN][MAXN];

void update(int i, int j, int k) {
    if (k == -1) {
        d[i][j] = d[i + 1][j - 1];
        ans[i][j] = make_pair(Range(i + 1, j - 1), Range(-1, -1));
    }
    else if (d[i][j] > d[i][k] + d[k + 1][j]) {
        d[i][j] = d[i][k] + d[k + 1][j];
        ans[i][j] = make_pair(Range(i, k), Range(k + 1, j));
    }
}

void print(int i, int j) {
    if (i > j) return;
    if (i == j) {
        if (s[i] == ')' || s[i] == '(') printf("()");
        else printf("[]");
    }
    else {
        Range &l = ans[i][j].first, &r = ans[i][j].second;
        if (l.i != -1 && l.j != -1 ) {
            if (r.i == -1 && r.j == -1) cout << s[i];
            print(l.i, l.j);
            if (r.i == -1 && r.j == -1) cout << s[j];
        }
        if (r.i != -1 && r.j != -1) print(r.i, r.j);
    }
}

int main() {
    int T, t = 0;
    scanf("%d", &T); getchar();
    while (T--) {
        getchar();
        if (++t > 1) putchar('\n');
        getline(cin, s);
        n = s.size();
        memset(d, -1, sizeof(d));
        for (int i = 0; i < n; i++) for (int j = i; j > -1; j--) { 
            d[i][j] = (i == j ? 1 : 0); 
            if (i == j) ans[i][j] = make_pair(Range(-1, -1), Range(-1, -1));
        }
        for (int L = 1; L < n; L++) {
            for (int i = 0; i + L < n; i++) {
                int j = i + L;
                if ((s[i] == '(' && s[j] == ')') || (s[i] == '[' && s[j] == ']')) 
                    update(i, j, -1);
                d[i][j] = (d[i][j] == -1 ? inf : d[i][j]);
                for (int k = i; k < j; k++) update(i, j, k); 
            }
        }
        if (n != 0) print(0, n - 1);
        putchar('\n');
    }
    return 0;
}
