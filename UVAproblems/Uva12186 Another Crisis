#include<cstdio>
#include<cstring>
#include<algorithm>
#include<cmath>
#include<vector>
using namespace std;
const int maxn = 100000 + 5;
const double eps = 1e-8;
int n;
double T;
vector<int> e[maxn];

struct Node {
    int w;
}g[maxn];

void add_edge(int father, int child) {
    e[father].push_back(child);
}

void dfs(int i) {
    vector<int> &subs = e[i];
    Node &cur = g[i];
    if (subs.empty()) {
        cur.w = 1;
        return;
    }
    cur.w = 0;
    int tot = subs.size(), cnt = 0;
    vector<int> temp;
    int w_need = T * tot + (fabs(T * tot - int(T * tot)) < eps ? 0 : 1);    
    for (auto j: subs) {
        dfs(j);
        temp.push_back(g[j].w); 
    }
    sort(temp.begin(), temp.end());
    for (int j = 0; j < w_need; j++) cur.w += temp[j];

}

int main() {
    int t;
    while (scanf("%d%d", &n, &t) == 2 && n && t) {
        for (int i = 0; i <= n; i++) e[i].clear();
        T = t / 100.0;
        int a;
        for (int i = 1; i <= n; i++) { scanf("%d", &a); add_edge(a, i); }
        dfs(0);
        printf("%d\n", g[0].w);
    }    
    return 0;
}
