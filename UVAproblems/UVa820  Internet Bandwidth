#include<cstdio>
#include<cstring>
#include<queue>
#include<algorithm>
#include<vector>

using namespace std;
const int maxn = 1000 + 10, INF = 2e9;
int n, m, a[maxn], p[maxn];
bool done[maxn];

struct Edge {
    int u, v, cap, flow;
    Edge(int u = 0, int v = 0, int cap = 0, int flow = 0): u(u), v(v), cap(cap), flow(flow) {}
};
vector<Edge> edges;
vector<int> G[maxn];

int MaxFlow(int s, int t) {
    int flow = 0;
    for (;;) {
        memset(done, 0 , sizeof(done));
        memset(a, 0 , sizeof(a));
        queue<int> q;
        q.push(s);
        p[s] = 0; a[s] = INF;
        while (!q.empty()) {
            int u = q.front(); q.pop();
            if (done[u]) continue;
            done[u] = true;
            for (int i = 0; i < G[u].size(); i++) {
                Edge &e = edges[G[u][i]];
                if (!a[e.v] && e.cap > e.flow) {
                    a[e.v] = min(e.cap - e.flow, a[u]);
                    p[e.v] = G[u][i];
                    q.push(e.v);
                }
            }
            if (a[t]) break;
        }
        if (!a[t]) break;
        flow += a[t];
        for (int u = t; u != s; u = edges[p[u]].u) {
            edges[p[u]].flow += a[t];
            edges[p[u]^1].flow -= a[t];
        }
    }
    return flow;
}

void addEdge(int u, int v, int cap) {
    edges.push_back(Edge(u, v, cap));
    edges.push_back(Edge(v, u, 0));
    G[u].push_back(edges.size() - 2);
    G[v].push_back(edges.size() - 1);
}

void init() {
    edges.clear();
    for (int i = 0; i < maxn; i++) G[i].clear();
}

int main() {
    int kase = 0;
    while (scanf("%d", &n) == 1 && n) {
        init();
        int u, v, c, s, t; 
        scanf("%d%d%d", &s, &t, &m);
        for (int i = 0; i < m ; i++) {
            scanf("%d%d%d", &u, &v, &c);
            addEdge(u, v, c);
            addEdge(v, u, c);
        }
         int ans = MaxFlow(s, t);
        printf("Network %d\nThe bandwidth is %d.\n\n", ++kase, ans);
        
    }
    return 0;
}
