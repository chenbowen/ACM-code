#include<cstdio>
#include<cstring>
#include<algorithm>
#include<cmath>
using namespace std;
const int MAXN = 100 + 3;
const double eps = 1e-9;
const double INF = 0x3f3f3f3f3f3f;
int m;
double d[MAXN][MAXN];

struct Point {
    double x, y;
}v[MAXN];

double area (Point &a, Point &b, Point &c) {
	return fabs((b.x-a.x)*(c.y-a.y) - (c.x-a.x)*(b.y-a.y))/2;
}

bool judge (int a, int b, int c) {  
    double cur = area(v[a], v[b], v[c]);
    for (int i = 0; i < m; i++) {  
        if (i == a || i == b || i == c)  
            continue;
        double tmp = area(v[a], v[b], v[i]) + area(v[b], v[c], v[i]) + area(v[c], v[a], v[i]);  
        if (fabs(tmp - cur) < eps)  
            return false;  
    }  
    return true;  
}  

int main() {
    int T;
    scanf("%d", &T);
    while (T--) {
        scanf("%d", &m);
        double ans = INF;
        for (int i = 0; i < m; i++) scanf("%lf%lf", &v[i].x, &v[i].y);  
        for (int L = 1; L < m; L++) {
            for (int i = 0; i < m; i++) {
                int j = (i + L) % m;
                if (L == 1) d[i][j] = 0;
                else {
                    d[i][j] = INF;
                    for (int k = (i + 1) % m; k != j; k = (k + 1) % m) {
                        if (L == 2 || judge(i, k, j))
                            d[i][j] = min(d[i][j], max(max(d[i][k], d[k][j]), area(v[i], v[k], v[j])));
                    }
                }
                if (L == m - 1) ans = min(ans, d[i][j]);
            }
        }
        printf("%.1lf\n", ans);
    }
    return 0;
}
