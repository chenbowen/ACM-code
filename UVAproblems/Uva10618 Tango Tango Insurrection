#include<cstdlib>
#include<cstdio>
#include<cstring>
#include<cmath>
#include<vector>
#include<algorithm>

using namespace std;
const int maxn = 70 + 5, inf = 1<<30;
int n, d[maxn][5][5][3], c[5][5][5][5][3][5];
int tr[150];
char s[maxn], op[maxn][5][5][3];
vector<int> nxt[maxn][5][5][3];

void init() {
    tr['.'] = 4; tr['L'] = 0; tr['U'] = 1; 
    tr['R'] = 2; tr['D'] = 3;
    memset(c, -1, sizeof(c));
    for (int i = 0; i < 4; i++) 
        for (int j = 0; j < 4; j++) {
            if (i == j || i == 2 && j == 0) continue;
            for (int t = 0; t < 3; t++)
                for (int x = 0; x < 4; x++)
                    for (int y = 0; y < 4; y++) {
                        if (x == y || (x == 2 && y == 0)) continue;
                        if (i != x && j != y) continue;
                        if (j == 0 && i != x) continue;
                        if (i == 2 && j != y) continue;
                        for (int p = 0; p < 5; p++) {
                            if (p != 4 && x != p && y != p) continue;
                            if (p != 4 && ((x == p && j != y) || (y == p && i != x))) continue;
                            if (!t || (t == 2 && (i != x || x == p)) || (t == 1 && (j != y || y == p))) 
                                c[i][j][x][y][t][p] = 1;
                            else {
                                if (i == x && j == y) {
                                    if (p == 4) continue;
                                    c[i][j][x][y][t][p] = 3;
                                }
                                else {
                                    int disx = abs(i - x), disy = abs(j - y);
                                    if (disx == 1 || disx == 3 || disy == 1 || disy == 3)
                                        c[i][j][x][y][t][p] = 5;
                                    else if (disx == 2 || disy == 2)
                                        c[i][j][x][y][t][p] = 7;
                                }
                            }
                        }
                    }
        }
}

void update(int i, int x, int y, int t, int nx, int ny, int nt, int v) {
    if (d[i][x][y][t] > v) {
        d[i][x][y][t] = v;
        nxt[i][x][y][t].clear();
        nxt[i][x][y][t].push_back(nx);
        nxt[i][x][y][t].push_back(ny);
        nxt[i][x][y][t].push_back(nt);
        if (!nt) op[i][x][y][t] = '.';
        else if (nt == 1)
            op[i][x][y][t] = 'L';
        else op[i][x][y][t] = 'R';
    }
}

int main() {
    init();

    while (scanf("%s", s) == 1 && s[0] != '#') {
        n = strlen(s);
        for (int i = 0; i < 4; i++) 
            for (int j = 0; j < 4; j++) 
                for (int t = 0; t < 3; t++)
                    if (i == j || (i == 2 && j == 0)) d[n][i][j][t] = inf;
                    else d[n][i][j][t] = 0;
        
        for (int i = n - 1; i >= 0; i--) {
            int p = tr[s[i]];
            for (int x = 0; x < 4; x++)
                for (int y = 0; y < 4; y++) {
                    if (x == y || (x == 2 && y == 0)) continue;
                    for (int t = 0; t < 3; t++) {
                        int &ans = d[i][x][y][t];
                        ans = inf;
                        if (p == 4) update(i, x, y, t, x, y, 0, d[i + 1][x][y][0]);
                        
                        for (int nx = 0; nx < 4; nx++)
                            for (int ny = 0; ny < 4; ny++) {
                                if (c[x][y][nx][ny][t][p] == -1) continue;
                                if (nx != p && ny != p && p != 4) continue;
                                if (p == 4 && nx == x && ny == y) continue;
                                int nt = (nx == p || x != nx) ? 1 : 2;
                                update(i, x, y, t, nx, ny, nt, d[i + 1][nx][ny][nt] + c[x][y][nx][ny][t][p]);
                            }
                    }
                }
        }
        int x = 0, y = 2, t = 0;
        for (int i = 0; i < n; i++) {
            putchar(op[i][x][y][t]);
            int tx = x, ty = y, tt = t;
            x = nxt[i][tx][ty][tt][0];
            y = nxt[i][tx][ty][tt][1];
            t = nxt[i][tx][ty][tt][2];
        }
        putchar('\n');
    }
    return 0;
}
