#include <cstdio>
#include <cstring>
#include <algorithm>
using namespace std;
const int maxn = 30 + 2;
int n, b[3][maxn], d[6*maxn], cnt;

struct Node {
    int x, y, z;
    Node(int x = 0, int y = 0, int z = 0): x(x), y(y), z(z) {}
    bool operator < (const Node &rhs) const {
        return x < rhs.x && y < rhs.y;
    }
}G[6*maxn];

bool _cmp(const Node &lhs, const Node &rhs) {
    return lhs.x < rhs.x;
}

int main() {
    int kase = 0;
    while (scanf("%d", &n) == 1 && n) {
        for (int i = 0; i < n; i++) scanf("%d%d%d", &b[0][i], &b[1][i], &b[2][i]);
        cnt = 0;
        for (int i = 0; i < 3; i++)
            for (int j = 0; j < 3; j++) if (i != j)
                for (int z = 0; z < 3; z++) if (z != i && z != j)
                    for (int k = 0; k < n; k++) 
                        G[cnt++] = Node(b[i][k], b[j][k], b[z][k]);
        sort(G, G + cnt, _cmp);
        int ans = 0;
        for (int i = 0; i < cnt; i++) d[i] = G[i].z;
        for (int i = 0; i < cnt; i++) 
            for (int j = 0; j < i; j++) if (G[j] < G[i]) d[i] = max(d[i], d[j] + G[i].z);
        for (int i = 0; i < cnt; i++) ans = max(ans, d[i]);
        printf("Case %d: maximum height = %d\n", ++kase, ans);
    }
    return 0;
}
