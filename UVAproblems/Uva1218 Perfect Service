#include<cstdio>
#include<cstring>
#include<algorithm>
#include<cmath>
#include <set>
using namespace std;
const int maxn = 1e4+5, inf = 1<<30;
int n, d[maxn][3];  
set<int> g[maxn], raw[maxn];

void build_tree(int i) {
    set<int> &sons = raw[i];
    for (auto j: sons) {
        g[i].insert(j);
        raw[j].erase(i);
        build_tree(j);
    }
}

int dp(int i, int t) {
    if (d[i][t] != inf) return d[i][t];
    set<int> &sons = g[i];
    if (sons.empty()) {
        if (t == 2) d[i][t] = 1;
        else if (t == 1) d[i][t] = maxn;
        else d[i][t] = 0;
        return d[i][t];
    }
    int temp = 0;
    if (t == 2) {
        for (auto j: sons) temp += min(dp(j, 0), dp(j, 2));
        temp++;
    }
    
    if (t == 0) 
        for (auto j: sons) temp += dp(j, 1);
    
    if (t == 1) {
        temp = dp(i, 0);
        int tt = inf;
        for (auto j: sons)
            tt = min(tt, dp(j, 2) - dp(j, 1));
        temp += tt;
    }
    d[i][t] = min(d[i][t], temp);
    return d[i][t];
}

int main() {
    do {
        if (n == 0) scanf("%d", &n);
        for (int i = 1; i <= n; i++) { 
            raw[i].clear(); g[i].clear();
            for (int j = 0; j < 3; j++) d[i][j] = inf;
        }
        int a, b;
        for (int i = 1; i < n; i++) {
            scanf("%d%d", &a, &b);
            raw[a].insert(b);
            raw[b].insert(a);
        }
        build_tree(1);
        printf("%d\n", min(dp(1, 1), dp(1, 2)));
    } while(scanf("%d", &n) == 1 && n != -1);
    return 0;
}
