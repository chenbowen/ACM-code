#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <algorithm>
#include <queue>
using namespace std;

const int MAXHASHSIZE = 500;
int d, _head[MAXHASHSIZE], _next[MAXHASHSIZE];
int vol[3], _d, ans, idx, st[MAXHASHSIZE], pour_set[MAXHASHSIZE];

struct Node {
    int v[3], pour; 
    Node(int a = 0, int b = 0, int c = 0, int p = 0) {
        v[0] = a; v[1] = b; v[2] = c; pour = p;
    }
    bool operator == (const Node &rhs) const {
        for (int i = 0; i < 3; i++) if (rhs.v[i] != v[i]) return false;
        if (rhs.pour != pour) return false;
        return true;
    }
};

void init() {
    _d = -1;
    ans = 2147483647;
    idx = 1;
    memset(_head, 0, sizeof(_head));   
}

bool try_to_insert(Node &cur) {
    int status = cur.v[0] * 1000000 + cur.v[1] * 1000 + cur.v[2];
    int h = status % MAXHASHSIZE;
    int u = _head[h];
    while (u) {
        if (st[u] == status) {
            if (cur.pour < pour_set[u]) {
                pour_set[u] = cur.pour;
                return 1;
            }
            return 0;
        }
        u = _next[u];
    }
    st[idx] = status;
    pour_set[idx] = cur.pour;
    _next[idx] = _head[h];
    _head[h] = idx++;
    return 1;
}

void bfs(Node start) {
    pour_set[1] = start.pour;
    try_to_insert(start);
    queue<Node> q; 
    q.push(start);
    while (!q.empty()) {
        Node cur = q.front(); q.pop();
        for (int i = 0; i < 3; i++) {
            if (cur.v[i] == _d)
                ans = min(ans, cur.pour);
            else if (cur.v[i] > _d && cur.v[i] <= d) {
                ans = cur.pour; 
                _d = cur.v[i];
            }
            if (cur.v[i] != 0)
                for (int j = 0; j < 3; j++) if (i != j) {
                    int pour = min(cur.v[i], vol[j] - cur.v[j]);
                    cur.v[i] -= pour;
                    cur.v[j] += pour;
                    Node nextn = Node(cur.v[0], cur.v[1], cur.v[2], cur.pour + pour);
                    cur.v[i] += pour;
                    cur.v[j] -= pour;
                    if (try_to_insert(nextn)) q.push(nextn);
                }
        }
    }
}

int main() {
    int T;
    scanf("%d", &T);
    while (T--) {
        init();
        scanf("%d%d%d%d", &vol[0], &vol[1], &vol[2], &d);
        bfs(Node(0, 0, vol[2], 0));
        printf("%d %d\n", ans, _d);
    }
    return 0;
}
