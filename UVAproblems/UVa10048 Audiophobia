#include<cstdio>
#include<cstring>
#include<algorithm>

using namespace std;
const int maxn = 100 + 2, INF = 2147483647;
int n, m, q, f[maxn][maxn];

void Floyd() {
    for (int k = 0; k < n; k++)
        for (int i = 0; i < n; i++)
            for (int j = 0; j < n; j++)
             f[i][j] = min(f[i][j], max(f[i][k], f[k][j]));
}

int main() {
    int kase = 0;
    while ((scanf("%d%d%d", &n, &m, &q)) && n) {
        for (int i = 0; i < n; i++) for (int j = 0; j < n; j++) f[i][j] = INF;
        for (int i = 0; i < n; i++) f[i][i] = 0;
        int u, v, w;
        for (int i = 0; i < m; i++) {
            scanf("%d%d%d", &u, &v, &w);
            f[u - 1][v - 1] = f[v - 1][u - 1] = w;
        }
        Floyd();
        if (++kase > 1) printf("\n");
        printf("Case #%d\n", kase);
        for (int i = 0; i < q; i++) {
            scanf("%d%d", &u, &v);
            if (f[u - 1][v - 1] == INF) printf("no path\n");
            else printf("%d\n", f[u - 1][v - 1]);
        }
    }
    return 0;
}
